name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on tags like v0.1.0, v1.2.3, etc.

env:
  CARGO_TERM_COLOR: always

jobs:
  publish:
    name: Publish to crates.io and create GitHub release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run tests
        run: cargo test --verbose --all-targets
      
      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Tag version: $VERSION"
      
      - name: Verify version matches Cargo.toml
        run: |
          CARGO_VERSION=$(grep '^version =' Cargo.toml | cut -d'"' -f2)
          TAG_VERSION="${{ steps.get_version.outputs.version }}"
          if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Cargo.toml version ($CARGO_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi
          echo "Version match confirmed: $CARGO_VERSION"
      
      - name: Install git-cliff
        run: |
          cargo install git-cliff --locked
          git-cliff --version
      
      - name: Get default branch
        id: default_branch
        run: |
          BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@' || echo "main")
          if [ -z "$BRANCH" ] || [ "$BRANCH" = "HEAD" ]; then
            BRANCH="main"
          fi
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "Default branch: $BRANCH"
      
      - name: Checkout default branch
        run: |
          git fetch origin +${{ steps.default_branch.outputs.branch }}:refs/remotes/origin/${{ steps.default_branch.outputs.branch }}
          git checkout ${{ steps.default_branch.outputs.branch }}
      
      - name: Generate changelog
        id: changelog
        run: |
          git fetch --tags --unshallow 2>/dev/null || git fetch --tags
          git-cliff --config cliff.toml --output CHANGELOG.md --tag v${{ steps.get_version.outputs.version }}
          # Extract release notes for this version
          VERSION="${{ steps.get_version.outputs.version }}"
          NOTES=$(awk "/^## \[v?$VERSION\]/,/^## \[/ {if (/^## \[/ && NR>1) exit; print}" CHANGELOG.md | head -n -1 || \
                  awk "/^## \[v?$VERSION\]/,/^$/" CHANGELOG.md)
          {
            echo 'notes<<EOF'
            echo "$NOTES"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
          cat CHANGELOG.md
      
      - name: Create Pull Request for changelog update
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: chore/changelog-v${{ steps.get_version.outputs.version }}
          base: ${{ steps.default_branch.outputs.branch }}
          title: "chore: update changelog for v${{ steps.get_version.outputs.version }}"
          body: |
            ## üìù Changelog Update
            
            This PR automatically updates the changelog for release **v${{ steps.get_version.outputs.version }}**.
            
            ### Changes
            - Updated `CHANGELOG.md` with entries for version `v${{ steps.get_version.outputs.version }}`
            
            ---
            
            This PR was created automatically by the release workflow. Please review and merge to update the changelog on the default branch.
          commit-message: "chore: update changelog for v${{ steps.get_version.outputs.version }}"
          author: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
          committer: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
          labels: |
            automated
            changelog
          delete-branch: true
          skip-if-no-changes: true
      
      - name: Build release
        run: cargo build --release --verbose
      
      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: cargo publish --verbose --no-verify
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.get_version.outputs.version }}
          body: |
            ${{ steps.changelog.outputs.notes }}
            
            ## Installation
            
            ```toml
            [dependencies]
            rtoon = "${{ steps.get_version.outputs.version }}"
            ```
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

