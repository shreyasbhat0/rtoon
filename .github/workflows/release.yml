name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on tags like v0.1.0, v1.2.3, etc.

env:
  CARGO_TERM_COLOR: always

jobs:
  publish:
    name: Publish to crates.io and create GitHub release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run tests
        run: cargo test --verbose --all-targets
      
      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Tag version: $VERSION"
      
      - name: Verify version matches Cargo.toml
        run: |
          CARGO_VERSION=$(grep '^version =' Cargo.toml | cut -d'"' -f2)
          TAG_VERSION="${{ steps.get_version.outputs.version }}"
          if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Cargo.toml version ($CARGO_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi
          echo "Version match confirmed: $CARGO_VERSION"
      
      - name: Build release
        run: cargo build --release --verbose
      
      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: cargo publish --verbose --no-verify
      
      - name: Extract release notes
        id: release_notes
        run: |
          # Try to extract from CHANGELOG.md if it exists, otherwise use tag message
          if [ -f CHANGELOG.md ]; then
            # Extract section for this version from CHANGELOG.md
            VERSION="${{ steps.get_version.outputs.version }}"
            NOTES=$(awk "/^## \[?$VERSION\]?/,/^## /" CHANGELOG.md | head -n -1 || \
                    awk "/^## \[?$VERSION\]?/,/^$/" CHANGELOG.md)
            if [ -z "$NOTES" ]; then
              NOTES="Release version $VERSION"
            fi
          else
            # Fallback: get tag message or create default
            NOTES=$(git tag -l --format='%(contents)' v${{ steps.get_version.outputs.version }} || echo "Release version ${{ steps.get_version.outputs.version }}")
          fi
          # Store in multi-line format
          {
            echo 'notes<<EOF'
            echo "$NOTES"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.get_version.outputs.version }}
          body: |
            ${{ steps.release_notes.outputs.notes }}
            
            ## Installation
            
            ```toml
            [dependencies]
            rtoon = "${{ steps.get_version.outputs.version }}"
            ```
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

